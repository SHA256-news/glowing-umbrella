name: Publish Article

on:
  schedule:
    # Run every day at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      max_articles:
        description: 'Maximum number of articles to fetch'
        required: false
        default: '5'
        type: string
      days_back:
        description: 'Number of days back to search'
        required: false
        default: '1'  # Reduced from 7 to 1 for much better performance
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  fetch-and-generate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Fetch news articles
      id: fetch_news
      env:
        EVENTREGISTRY_API_KEY: ${{ secrets.EVENTREGISTRY_API_KEY }}
      run: |
        max_articles="${{ github.event.inputs.max_articles || '5' }}"
        days_back="${{ github.event.inputs.days_back || '1' }}"  # Performance: default to 1 day
        
        echo "Fetching Bitcoin mining news with performance optimizations..."
        echo "Searching last $days_back day(s) for up to $max_articles articles"
        
        # Use optimized approach with fast mode and fallback
        python scripts/fetch_news.py \
          --max-articles "$max_articles" \
          --days-back "$days_back" \
          --output-format uris \
          --fast-mode > news_uris.txt || {
            echo "Fast mode failed, trying with smaller 8-hour window..."
            python scripts/fetch_news.py \
              --max-articles "$max_articles" \
              --recency-minutes 480 \
              --output-format uris \
              --fast-mode > news_uris.txt
          }
        
        # Check if we got any results
        if [ ! -s news_uris.txt ]; then
          echo "No news articles found."
          echo "Generating a sample article in test mode instead..."
          echo "test-mode-sample" > news_uris.txt
        fi
        
        # Get the first URI for article generation
        first_uri=$(head -n 1 news_uris.txt)
        echo "first_uri=$first_uri" >> $GITHUB_OUTPUT
        
        echo "Found $(wc -l < news_uris.txt) news articles"
        echo "Processing first article: $first_uri"
        
    - name: Generate article
      id: generate_article
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        EVENTREGISTRY_API_KEY: ${{ secrets.EVENTREGISTRY_API_KEY }}
      run: |
        if [ -z "${{ steps.fetch_news.outputs.first_uri }}" ]; then
          echo "No news URI available for article generation."
          exit 1
        fi
        
        echo "Generating article for URI: ${{ steps.fetch_news.outputs.first_uri }}"
        
        # Check if we're using test mode fallback
        if [ "${{ steps.fetch_news.outputs.first_uri }}" = "test-mode-sample" ]; then
          echo "Using test mode for article generation due to no events found"
          # Create a dummy events.json with test URI for test mode
          echo '{"event_uris": ["test-mode-sample"], "updated_at": "'$(date -Iseconds)'", "total_events": 1}' > events.json
          python scripts/generate_article.py --test-mode
        else
          # Events should already be in events.json from fetch step
          python scripts/generate_article.py
        fi
        
        # Verify the article was generated and copy to expected location
        if [ "${{ steps.fetch_news.outputs.first_uri }}" = "test-mode-sample" ] || [ -n "$(ls -A articles/ 2>/dev/null)" ]; then
          # Find the most recently created article file
          latest_article=$(ls -t articles/*.json 2>/dev/null | head -n 1)
          if [ -n "$latest_article" ]; then
            cp "$latest_article" "generated_article.json"
            echo "Article generated successfully: $latest_article -> generated_article.json"
          else
            echo "Failed to generate article - no files in articles directory."
            exit 1
          fi
        else
          echo "Failed to generate article."
          exit 1
        fi
        
        # Extract headline for summary
        headline=$(python -c "import json; data=json.load(open('generated_article.json')); print(data.get('headline', 'Bitcoin Mining News'))")
        echo "article_headline=$headline" >> $GITHUB_OUTPUT
        
    - name: Generate Bitcoin Mining Report
      if: success()
      run: |
        # Copy the generated article to bitcoin_mining_report.json
        cp generated_article.json bitcoin_mining_report.json
        
        echo "Successfully created bitcoin_mining_report.json"
        echo "Report contents:"
        
        # Use python to extract the headline since jq might not be available
        python -c "
import json
try:
    with open('bitcoin_mining_report.json', 'r') as f:
        data = json.load(f)
    print(f\"Headline: {data.get('headline', 'No headline available')}\")
    print(f\"Generated at: {data.get('generated_at', 'Unknown')}\")
    print(f\"Source: {data.get('source_event_uri', 'Unknown')}\")
except Exception as e:
    print(f\"Error reading report: {e}\")
"
        
    - name: Commit and push report
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add bitcoin_mining_report.json
        
        # Only commit if there are changes
        if git diff --cached --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update Bitcoin mining report - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "Successfully pushed updated bitcoin_mining_report.json"
        fi
          
    - name: Upload article artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: generated-article-${{ github.run_number }}
        path: |
          generated_article.json
          news_uris.txt
        retention-days: 30
        
    - name: Trigger Twitter posting workflow
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'post_to_twitter.yml',
            ref: context.ref,
            inputs: {
              article_run_number: '${{ github.run_number }}'
            }
          });
          
          console.log('Triggered Twitter posting workflow');